{"version":3,"file":"static/webpack/static/development/pages/user.js.1e0ccd22168defadfb07.hot-update.js","sources":["webpack:///./pages/user.js"],"sourcesContent":["/* Third Party */\nimport React, { Component } from 'react'\nimport { Grid, Row, Col } from 'react-styled-flexboxgrid'\nimport styled from 'styled-components'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport Router from 'next/router'\nimport 'isomorphic-fetch'\n\nimport {\n    populateRepos\n} from '../redux/modules/store'\nimport RepoCard from '../components/RepoCard'\n\nconst UserImg = styled.img`\n    border-radius: 0.2rem 0.2rem 0rem 0rem;\n    opacity: 1;\n    height: 10rem;\n`\nclass User extends Component {\n\n    static async getInitialProps({ store, pathname, asPath}) {\n        const { currentUser } = store.getState()\n        console.log(currentUser)\n        // make repos api call here\n        const urlRequest = currentUser.repos_url\n        await fetch(urlRequest)\n            .then(res => res.json())\n            .then(repos => {\n                store.dispatch(populateRepos(repos))\n            })\n        return { pathname, asPath }\n    }\n\n    render () {\n        const {\n            props\n        } = this\n\n        const {\n            pathname,\n            asPath,\n            currentUser,\n            repos\n        } = props\n\n        console.log('currentUser: ', currentUser)\n        console.log('repos: ', repos)\n        return (\n            <Grid>\n                <Row start='xs'>\n                    <Col>\n                        <UserImg src={ currentUser.avatar_url} />\n                        <h2> { currentUser.login } </h2>\n                    </Col>\n\n                    <Col>\n                        <h1> </h1>\n                    </Col>\n                </Row>\n                    { repos && repos.map((repo, i) => {\n                        return (\n                            <Row>\n                                <Col>\n                                    <RepoCard\n                                        repo={repo}\n                                    />\n                                </Col>\n                            </Row>\n                        )\n                    })}\n            </Grid>\n        )\n    }\n}\n\nexport const mapStateToProps = (state) => {\n    return { ...state }\n}\n\nexport const mapDispatchToProps = (dispatch) => {\n    return {\n        populateRepos: bindActionCreators(populateRepos, dispatch)\n    }\n}\n\nexport default connect(mapStateToProps)(User)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAIA;;;;;;;;;;;;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;;;;;;;;;;;;;AApDA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAEA;AACA;AACA;;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAbA;AACA;AAwDA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}